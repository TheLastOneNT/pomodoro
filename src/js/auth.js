// src/js/auth.js ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –≥–∞—Ä–¥–æ–º –ø–æ–¥ –æ—Ñ—Ñ–ª–∞–π–Ω (–±–µ–∑ Supabase)
import { supabase, SUPA_ENABLED_FLAG } from './supa.js';

const state = { user: null };
export const getUser = () => state.user;
export const isLoggedIn = () => !!state.user;

function $(id) {
  return document.getElementById(id);
}

function setStatus(msg) {
  const el = $('authStatus');
  if (el) el.textContent = msg || '';
  console.log('[auth]', msg);
}

function setUIEnabled(enabled) {
  const form = $('authForm');
  const emailEl = $('authEmail');
  const passEl = $('authPass');
  const modeEl = $('authMode');
  const googleBtn = $('loginGoogle');
  const logoutBtn = $('logoutBtn');

  [form, emailEl, passEl, modeEl, googleBtn, logoutBtn].forEach((el) => {
    if (el && 'disabled' in el) el.disabled = !enabled;
  });

  // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞—Ö
  if (!enabled) {
    if (emailEl) emailEl.placeholder = '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ (–æ—Ñ—Ñ–ª–∞–π–Ω)';
    if (passEl) passEl.placeholder = '–ù–µ –¥–æ—Å—Ç—É–ø–Ω–æ (–æ—Ñ—Ñ–ª–∞–π–Ω)';
  }
}

export function toggleAuth(show) {
  const modal = $('authModal');
  if (!modal) return;
  modal.classList.toggle('show', !!show);
  if (show) $('authEmail')?.focus();
}

function updateUI() {
  const email = state.user?.email || state.user?.user_metadata?.email;
  const btn = $('openAuth');

  if (email) {
    setStatus('–í —Å–∏—Å—Ç–µ–º–µ: ' + email);
    if (btn) btn.textContent = 'üë§';
  } else {
    setStatus(SUPA_ENABLED_FLAG ? '–ù–µ –≤–æ—à–ª–∏' : '–û—Ñ—Ñ–ª–∞–π–Ω: –≤—Ö–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
    if (btn) btn.textContent = 'üîê';
  }
  document.dispatchEvent(new CustomEvent('auth:change', { detail: state.user }));
}

export async function initAuth() {
  // 1) –ï—Å–ª–∏ Supabase –≤—ã–∫–ª—é—á–µ–Ω ‚Äî –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∂–∏–≤—ë—Ç, –Ω–æ –≤—Ö–æ–¥/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã
  if (!SUPA_ENABLED_FLAG) {
    console.warn(
      '[auth] Supabase –≤—ã–∫–ª—é—á–µ–Ω (–Ω–µ—Ç VITE_SUPABASE_URL/ANON_KEY). UI —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ.'
    );
    setStatus('–û—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º: –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    setUIEnabled(false);

    // –±–∞–∑–æ–≤—ã–µ –∫–ª–∏–∫–∏: –æ—Ç–∫—Ä—ã—Ç–∏–µ/–∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø—É—Å—Ç—å —Ä–∞–±–æ—Ç–∞—é—Ç (–¥–ª—è UX)
    $('openAuth')?.addEventListener('click', () => toggleAuth(true));
    $('authClose')?.addEventListener('click', () => toggleAuth(false));
    $('logoutBtn')?.addEventListener('click', () => alert('–í –æ—Ñ—Ñ–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –≤—ã—Ö–æ–¥–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'));
    return;
  }

  // 2) –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –≤–µ—Ç–∫–∞ —Å Supabase
  setUIEnabled(true);
  setStatus('–ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏—é‚Ä¶');

  try {
    const { data, error } = await supabase.auth.getUser();
    if (error) console.warn('getUser error:', error);
    state.user = data?.user ?? null;
    updateUI();
  } catch (err) {
    console.error('[auth] getUser failed:', err);
    setStatus('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
  }

  // —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
  try {
    supabase.auth.onAuthStateChange((event, session) => {
      console.log('[auth] onAuthStateChange:', event, session);
      state.user = session?.user ?? null;
      updateUI();
      if (state.user) toggleAuth(false);
    });
  } catch (err) {
    console.error('[auth] onAuthStateChange failed:', err);
  }

  // —ç–ª–µ–º–µ–Ω—Ç—ã
  const openBtn = $('openAuth');
  const closeBtn = $('authClose');
  const logoutBtn = $('logoutBtn');
  const form = $('authForm');
  const emailEl = $('authEmail');
  const passEl = $('authPass');
  const modeEl = $('authMode');
  const googleBtn = $('loginGoogle');

  openBtn?.addEventListener('click', () => toggleAuth(true));
  closeBtn?.addEventListener('click', () => toggleAuth(false));

  logoutBtn?.addEventListener('click', async () => {
    setStatus('–í—ã—Ö–æ–¥‚Ä¶');
    try {
      const { error } = await supabase.auth.signOut();
      if (error) {
        alert(error.message);
        setStatus('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞');
      } else {
        setStatus('–í—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞');
      }
    } catch (err) {
      console.error(err);
      alert(err.message || 'Sign out error');
      setStatus('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞');
    }
  });

  // Email/–ü–∞—Ä–æ–ª—å
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const email = (emailEl?.value || '').trim();
    const password = passEl?.value || '';

    try {
      if (modeEl?.value === 'signup') {
        setStatus('–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é‚Ä¶');
        const { error } = await supabase.auth.signUp({ email, password });
        if (error) throw error;
        setStatus('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ—á—Ç—É (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).');
      } else {
        setStatus('–í—Ö–æ–¥‚Ä¶');
        const { error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });
        if (error) throw error;
        setStatus('–ì–æ—Ç–æ–≤–æ!');
        toggleAuth(false);
      }
    } catch (err) {
      console.error(err);
      alert(err.message || 'Auth error');
      setStatus('–û—à–∏–±–∫–∞: ' + (err.message || ''));
    }
  });

  // Google OAuth
  googleBtn?.addEventListener('click', async () => {
    try {
      setStatus('–†–µ–¥–∏—Ä–µ–∫—Ç –≤ Google‚Ä¶');
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: window.location.origin,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          },
        },
      });
      if (error) throw error;
      // –î–∞–ª—å—à–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç onAuthStateChange
    } catch (err) {
      console.error(err);
      alert(err.message || 'Google OAuth error');
      setStatus('–û—à–∏–±–∫–∞ Google OAuth');
    }
  });
}
