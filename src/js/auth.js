// src/js/auth.js ‚Äî —Å –≤–∏–¥–∏–º—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –∏ –ª–æ–≥–∞–º–∏
import { supabase } from "./supa.js";

const state = { user: null };
export const getUser = () => state.user;
export const isLoggedIn = () => !!state.user;

function setStatus(msg) {
  const el = document.getElementById("authStatus");
  if (el) el.textContent = msg || "";
  console.log("[auth]", msg);
}

export async function initAuth() {
  setStatus("–ü—Ä–æ–≤–µ—Ä—è—é —Å–µ—Å—Å–∏—é‚Ä¶");
  const {
    data: { user },
    error,
  } = await supabase.auth.getUser();
  if (error) console.warn("getUser error:", error);
  state.user = user ?? null;
  updateUI();

  // —Å–ª—É—à–∞—Ç–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–µ—Å—Å–∏–∏
  supabase.auth.onAuthStateChange((event, session) => {
    console.log("[auth] onAuthStateChange:", event, session);
    state.user = session?.user ?? null;
    updateUI();
    // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–µ—Å—Å–∏—é –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ Google ‚Äî –ø—Ä—è—á–µ–º –º–æ–¥–∞–ª–∫—É
    if (state.user) toggleAuth(false);
  });

  // —ç–ª–µ–º–µ–Ω—Ç—ã
  const openBtn = document.getElementById("openAuth");
  const closeBtn = document.getElementById("authClose");
  const logoutBtn = document.getElementById("logoutBtn");
  const form = document.getElementById("authForm");
  const emailEl = document.getElementById("authEmail");
  const passEl = document.getElementById("authPass");
  const modeEl = document.getElementById("authMode");
  const googleBtn = document.getElementById("loginGoogle");

  openBtn?.addEventListener("click", () => toggleAuth(true));
  closeBtn?.addEventListener("click", () => toggleAuth(false));

  logoutBtn?.addEventListener("click", async () => {
    setStatus("–í—ã—Ö–æ–¥‚Ä¶");
    const { error } = await supabase.auth.signOut();
    if (error) {
      alert(error.message);
      setStatus("–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞");
    } else {
      setStatus("–í—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞");
    }
  });

  // Email/–ü–∞—Ä–æ–ª—å
  form?.addEventListener("submit", async (e) => {
    e.preventDefault();
    const email = emailEl.value.trim();
    const password = passEl.value;
    try {
      if (modeEl.value === "signup") {
        setStatus("–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é‚Ä¶");
        const { error } = await supabase.auth.signUp({ email, password });
        if (error) throw error;
        setStatus("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞. –ü—Ä–æ–≤–µ—Ä—å –ø–æ—á—Ç—É (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ).");
      } else {
        setStatus("–í—Ö–æ–¥‚Ä¶");
        const { error } = await supabase.auth.signInWithPassword({
          email,
          password,
        });
        if (error) throw error;
        setStatus("–ì–æ—Ç–æ–≤–æ!");
        toggleAuth(false);
      }
    } catch (err) {
      console.error(err);
      alert(err.message || "Auth error");
      setStatus("–û—à–∏–±–∫–∞: " + (err.message || ""));
    }
  });

  // Google OAuth
  googleBtn?.addEventListener("click", async () => {
    try {
      setStatus("–†–µ–¥–∏—Ä–µ–∫—Ç –≤ Google‚Ä¶");
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: {
          redirectTo: window.location.origin, // http(s)://host:port
          queryParams: {
            access_type: "offline",
            prompt: "consent",
          },
        },
      });
      if (error) throw error;
      // –¥–∞–ª—å—à–µ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ª–æ–≥–∏ —É–≤–∏–¥–∏—à—å –≤ Network
    } catch (err) {
      console.error(err);
      alert(err.message || "Google OAuth error");
      setStatus("–û—à–∏–±–∫–∞ Google OAuth");
    }
  });
}

export function toggleAuth(show) {
  const modal = document.getElementById("authModal");
  if (!modal) return;
  modal.classList.toggle("show", !!show);
  if (show) {
    const el = document.getElementById("authEmail");
    el?.focus();
  }
}

function updateUI() {
  const email = state.user?.email || state.user?.user_metadata?.email;
  if (email) {
    setStatus("–í —Å–∏—Å—Ç–µ–º–µ: " + email);
    // –ú–æ–∂–Ω–æ –µ—â—ë –≥–¥–µ-—Ç–æ –≤ —à–∞–ø–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å ¬´üë§ email¬ª –≤–º–µ—Å—Ç–æ ¬´üîê¬ª
    const btn = document.getElementById("openAuth");
    if (btn) btn.textContent = "üë§";
  } else {
    setStatus("–ù–µ –≤–æ—à–ª–∏");
    const btn = document.getElementById("openAuth");
    if (btn) btn.textContent = "üîê";
  }
  document.dispatchEvent(
    new CustomEvent("auth:change", { detail: state.user })
  );
}
