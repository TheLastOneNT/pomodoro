import { state } from "./state.js";

const $ = (s) => document.querySelector(s);
const timeEl = $("#time");
const phaseEl = $("#phase");
const tomatoBtn = $("#tomatoBtn");

// —Å–ª–æ–∏ –ª–∏—Ü–∞/–ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const face = document.getElementById("face");
const mouth = face.querySelector(".mouth");
const progressArc = document.getElementById("progressArc");

// –ø—Ä–æ–≥—Ä–µ—Å—Å –≥–µ–æ–º–µ—Ç—Ä–∏—è
const r = Number(progressArc.getAttribute("r")); // 168
const C = 2 * Math.PI * r;
progressArc.setAttribute("stroke-dasharray", String(C));
progressArc.setAttribute("stroke-dashoffset", String(C));

export function fmt(s) {
  s = Math.max(0, s | 0);
  const m = (s / 60) | 0,
    r = s % 60;
  return `${String(m).padStart(2, "0")}:${String(r).padStart(2, "0")}`;
}

function statusText() {
  if (!state.running) return "–û—Ç–¥—ã—Ö–∞–µ–º üòå";
  return state.phase === "focus" ? "–§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è üéØ" : "–ü–µ—Ä–µ—Ä—ã–≤ ‚òïÔ∏è";
}

function applyMood() {
  // —Ä–µ–∂–∏–º –Ω–∞ –∫–Ω–æ–ø–∫–µ ‚Äî –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
  tomatoBtn.classList.remove("mode-idle", "mode-focus", "mode-break");
  if (!state.running) tomatoBtn.classList.add("mode-idle");
  else
    tomatoBtn.classList.add(
      state.phase === "focus" ? "mode-focus" : "mode-break"
    );

  // —Ä–æ—Ç / –º–∏–º–∏–∫–∞
  mouth.classList.remove("mouth--smile", "mouth--rest", "mouth--pause");
  if (!state.running) mouth.classList.add("mouth--pause");
  else
    mouth.classList.add(
      state.phase === "focus" ? "mouth--smile" : "mouth--rest"
    );
}

export function sync() {
  // —Ç–µ–º–∞: –Ω–æ—á—å –¥–µ—Ñ–æ–ª—Ç ‚Üí –≤–∫–ª—é—á–∞–µ–º .day –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  document.body.classList.toggle("day", state.theme === "day");

  // —Ü–∏—Ñ—Ä—ã –∏ —Å—Ç–∞—Ç—É—Å
  timeEl.textContent = fmt(state.remaining);
  phaseEl.textContent = statusText();

  // –ø—Ä–æ–≥—Ä–µ—Å—Å ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω—è–µ–º–∞—è —á–∞—Å—Ç—å (–±–µ–∑ ¬´—Ç—Ä–µ–∫–∞¬ª)
  const total =
    state.phase === "break"
      ? state.durations.breakSec
      : state.durations.focusSec;
  const done = total ? 1 - state.remaining / total : 0;
  const offset = Math.max(0, Math.min(C, C - done * C));
  progressArc.setAttribute("stroke-dashoffset", String(offset));

  // –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ/–∞–Ω–∏–º–∞—Ü–∏–∏
  applyMood();
}
